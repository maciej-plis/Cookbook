plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
    id 'idea'
    id 'jacoco'
    id 'org.sonarqube' version "3.3"
    id 'com.palantir.docker' version "0.27.0"
    id 'com.palantir.docker-compose' version "0.27.0"
}

group = 'matthias'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '16'
targetCompatibility = '16'

configurations {
    compileOnly.extendsFrom annotationProcessor
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testImplementation
}

repositories {
    mavenCentral()
}

sourceSets {
    test {
        groovy {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            srcDirs = ['src/test/groovy']
        }
        resources.srcDir 'src/test/resources'
    }
    integrationTest {
        groovy {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            srcDirs = ['src/integration_test/groovy']
        }
        resources.srcDir 'src/integration_test/resources'
    }
}

dependencies {

    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.3'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.5.3'

    //MongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb:2.5.3'
    integrationTestImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:3.0.0'

    // Guava
    implementation "com.google.guava:guava:30.1.1-jre"

    // Spring Tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.3'

    // Spock
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.8'
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    integrationTestImplementation 'org.spockframework:spock-spring:2.0-groovy-3.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    // MapStruct
    compileOnly 'org.mapstruct:mapstruct:1.4.2.Final'
    testImplementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
}

idea.module {
    testSourceDirs += sourceSets.integrationTest.groovy.srcDirs
    testResourceDirs += sourceSets.integrationTest.resources.srcDirs
}

jacocoTestReport.reports {
    xml.enabled true
    html.enabled true
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    group 'verification'
    mustRunAfter test
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check {
    dependsOn test, integrationTest
}

jacocoTestReport {
    dependsOn check
}

sonarqube.properties {
    property "sonar.host.url", "http://192.168.1.2:9000"
    property "sonar.projectKey", "Cookbook"
    property "sonar.login", "6ab5762b50d3b4d1977437312ea8183e5046b775"
}

tasks.sonarqube.configure {
    dependsOn jacocoTestReport
}

docker {
    String jarFile = "$project.name-${project.version}.jar"
    dockerfile file('./docker/Dockerfile')
    name "$project.name:$project.version"
    tag "latest", "$project.name:latest"
    buildArgs([JAR_FILE: "$jarFile"])
    files "./build/libs/$jarFile"
}

dockerCompose {
    dockerComposeFile file('./docker/docker-compose.yml')
}
compileJava.options.compilerArgs += [
    '-Amapstruct.defaultComponentModel=spring',
    '-Amapstruct.unmappedTargetPolicy=ERROR'
]